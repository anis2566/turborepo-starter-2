// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  Boolean   @default(false)
  password       String?
  image          String?   
  role           String    @default("User")
  status         String    @default("Pending")
  phone          String?

  accounts     Account[]
  sessions     Session[]
  bank         UserBank?
  referredToMe Refer?    @relation("UserIsReferee")

  exams        Exam[]
  attempts     McqAttempt[]
  feedbacks    ExamFeedback[]
  transactions Transaction[]
  purchases    PlanPurchase[]
  referredByMe Refer[]        @relation("UserIsReferer")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@index([role, status])
  @@index([status, createdAt])
}

model Account {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  accountId    String
  providerId   String
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique @map("token")
  userId    String   @db.ObjectId
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

